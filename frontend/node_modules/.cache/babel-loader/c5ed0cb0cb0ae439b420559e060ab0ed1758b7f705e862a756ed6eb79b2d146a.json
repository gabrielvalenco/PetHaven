{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\PetHaven\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { setAuthToken, apiAuthPost, fetchCSRFToken } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Load user from localStorage on component mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        setUser(userData);\n        // Note: We don't need to call setAuthToken here because\n        // our api.js utility already initializes the token on load\n      } catch (error) {\n        // If there's a problem with the stored data, clear it\n        console.error('Error parsing stored user data:', error);\n        localStorage.removeItem('user');\n        setUser(null);\n        setAuthToken(null);\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Use the apiPost utility for login\n      const result = await apiPost('/auth/login/', {\n        username,\n        password\n      });\n      if (result.success) {\n        const userData = result.data;\n        console.log('Login successful:', userData);\n\n        // Armazenar usuário no localStorage e contexto\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n\n        // Definir cabeçalho de autorização padrão para requisições futuras\n        setAuthToken(userData.token);\n        return true;\n      } else {\n        var _result$error, _result$error$non_fie;\n        const errorMsg = ((_result$error = result.error) === null || _result$error === void 0 ? void 0 : (_result$error$non_fie = _result$error.non_field_errors) === null || _result$error$non_fie === void 0 ? void 0 : _result$error$non_fie[0]) || 'Falha no login. Verifique suas credenciais.';\n        console.error('Login error:', errorMsg);\n        setError(errorMsg);\n        return false;\n      }\n    } catch (err) {\n      console.error('Unexpected login error:', err);\n      setError('Erro inesperado ao tentar fazer login. Tente novamente.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Use the apiPost utility for registration\n      const result = await apiPost('/auth/register/', userData);\n      if (result.success) {\n        console.log('Registration successful');\n        // Se quiser fazer login automático após o registro, descomente o código abaixo\n        // const userData = result.data;\n        // localStorage.setItem('user', JSON.stringify(userData));\n        // setUser(userData);\n        // setAuthToken(userData.token);\n        return true;\n      } else {\n        // Extrai mensagens de erro da resposta\n        let errorMessage = 'Falha no cadastro. Por favor, tente novamente.';\n        if (result.error) {\n          // Tentativa de formatar os erros de uma maneira mais amigável\n          const errors = result.error;\n          const errorMessages = [];\n          Object.keys(errors).forEach(key => {\n            if (Array.isArray(errors[key])) {\n              errorMessages.push(`${key}: ${errors[key].join(', ')}`);\n            } else {\n              errorMessages.push(`${key}: ${errors[key]}`);\n            }\n          });\n          if (errorMessages.length > 0) {\n            errorMessage = errorMessages.join('\\n');\n          }\n        }\n        console.error('Registration error:', errorMessage);\n        setError(errorMessage);\n        return false;\n      }\n    } catch (err) {\n      console.error('Unexpected registration error:', err);\n      setError('Erro inesperado ao tentar fazer o cadastro. Tente novamente.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // Call logout endpoint (if your backend has one)\n      // await apiPost('/auth/logout/');\n\n      // Remove user from localStorage\n      localStorage.removeItem('user');\n      setUser(null);\n\n      // Clear auth headers\n      setAuthToken(null);\n      return true;\n    } catch (error) {\n      console.error('Logout error:', error);\n      return false;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","setAuthToken","apiAuthPost","fetchCSRFToken","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","storedUser","localStorage","getItem","userData","JSON","parse","console","removeItem","login","username","password","result","apiPost","success","data","log","setItem","stringify","token","_result$error","_result$error$non_fie","errorMsg","non_field_errors","err","register","errorMessage","errors","errorMessages","Object","keys","forEach","key","Array","isArray","push","join","length","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/laragon/www/PetHaven/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { setAuthToken, apiAuthPost, fetchCSRFToken } from '../utils/api';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Load user from localStorage on component mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        setUser(userData);\n        // Note: We don't need to call setAuthToken here because\n        // our api.js utility already initializes the token on load\n      } catch (error) {\n        // If there's a problem with the stored data, clear it\n        console.error('Error parsing stored user data:', error);\n        localStorage.removeItem('user');\n        setUser(null);\n        setAuthToken(null);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Use the apiPost utility for login\n      const result = await apiPost('/auth/login/', { username, password });\n      \n      if (result.success) {\n        const userData = result.data;\n        console.log('Login successful:', userData);\n        \n        // Armazenar usuário no localStorage e contexto\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        \n        // Definir cabeçalho de autorização padrão para requisições futuras\n        setAuthToken(userData.token);\n        \n        return true;\n      } else {\n        const errorMsg = result.error?.non_field_errors?.[0] || 'Falha no login. Verifique suas credenciais.';\n        console.error('Login error:', errorMsg);\n        setError(errorMsg);\n        return false;\n      }\n    } catch (err) {\n      console.error('Unexpected login error:', err);\n      setError('Erro inesperado ao tentar fazer login. Tente novamente.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Use the apiPost utility for registration\n      const result = await apiPost('/auth/register/', userData);\n      \n      if (result.success) {\n        console.log('Registration successful');\n        // Se quiser fazer login automático após o registro, descomente o código abaixo\n        // const userData = result.data;\n        // localStorage.setItem('user', JSON.stringify(userData));\n        // setUser(userData);\n        // setAuthToken(userData.token);\n        return true;\n      } else {\n        // Extrai mensagens de erro da resposta\n        let errorMessage = 'Falha no cadastro. Por favor, tente novamente.';\n        if (result.error) {\n          // Tentativa de formatar os erros de uma maneira mais amigável\n          const errors = result.error;\n          const errorMessages = [];\n          \n          Object.keys(errors).forEach(key => {\n            if (Array.isArray(errors[key])) {\n              errorMessages.push(`${key}: ${errors[key].join(', ')}`);\n            } else {\n              errorMessages.push(`${key}: ${errors[key]}`);\n            }\n          });\n          \n          if (errorMessages.length > 0) {\n            errorMessage = errorMessages.join('\\n');\n          }\n        }\n        \n        console.error('Registration error:', errorMessage);\n        setError(errorMessage);\n        return false;\n      }\n    } catch (err) {\n      console.error('Unexpected registration error:', err);\n      setError('Erro inesperado ao tentar fazer o cadastro. Tente novamente.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Call logout endpoint (if your backend has one)\n      // await apiPost('/auth/logout/');\n      \n      // Remove user from localStorage\n      localStorage.removeItem('user');\n      setUser(null);\n      \n      // Clear auth headers\n      setAuthToken(null);\n      \n      return true;\n    } catch (error) {\n      console.error('Logout error:', error);\n      return false;\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}