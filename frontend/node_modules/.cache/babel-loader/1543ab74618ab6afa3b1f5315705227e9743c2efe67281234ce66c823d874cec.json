{"ast":null,"code":"import axios from 'axios';\n\n// Create a custom axios instance for API calls\nexport const api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  withCredentials: true // Important for cookies, including CSRF\n});\n\n// Helper function to set auth token in headers\nexport const setAuthToken = token => {\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Token ${token}`;\n    // Also set it for any requests made with the default axios instance\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Initialize token from localStorage if it exists\nconst initializeAuth = () => {\n  const storedUser = localStorage.getItem('user');\n  if (storedUser) {\n    try {\n      const userData = JSON.parse(storedUser);\n      if (userData && userData.token) {\n        setAuthToken(userData.token);\n      }\n    } catch (error) {\n      console.error('Invalid user data in localStorage:', error);\n      localStorage.removeItem('user');\n    }\n  }\n};\n\n// Call this function when the app starts\ninitializeAuth();\n\n// Function to fetch CSRF token before sensitive operations\nexport const fetchCSRFToken = async () => {\n  try {\n    await api.get('/csrf/');\n    console.log('CSRF token fetched successfully');\n    return true;\n  } catch (error) {\n    console.error('Error fetching CSRF token:', error);\n    return false;\n  }\n};\n\n// Export a convenience function for making authenticated API calls\nexport const makeAuthenticatedRequest = async (method, url, data = null, fetchCSRF = false) => {\n  try {\n    // Fetch CSRF token before POST/PUT/PATCH requests if requested\n    if (fetchCSRF && method !== 'get' && method !== 'options') {\n      await fetchCSRFToken();\n    }\n    const config = {\n      method,\n      url,\n      data: method !== 'get' ? data : undefined,\n      params: method === 'get' ? data : undefined\n    };\n    const response = await api(config);\n    return {\n      success: true,\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response;\n    console.error(`API Error (${url}):`, error);\n    return {\n      success: false,\n      error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Network error occurred'\n      }\n    };\n  }\n};\n\n// Export convenience methods for common HTTP verbs\nexport const apiGet = (url, params) => makeAuthenticatedRequest('get', url, params, false);\n\n// For auth operations (login/register), always fetch CSRF token first\nexport const apiAuthPost = (url, data) => makeAuthenticatedRequest('post', url, data, true);\n\n// Regular operations\nexport const apiPost = (url, data) => makeAuthenticatedRequest('post', url, data, false);\nexport const apiPut = (url, data) => makeAuthenticatedRequest('put', url, data, false);\nexport const apiPatch = (url, data) => makeAuthenticatedRequest('patch', url, data, false);\nexport const apiDelete = url => makeAuthenticatedRequest('delete', url, null, false);","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","setAuthToken","token","defaults","headers","common","initializeAuth","storedUser","localStorage","getItem","userData","JSON","parse","error","console","removeItem","fetchCSRFToken","get","log","makeAuthenticatedRequest","method","url","data","fetchCSRF","config","undefined","params","response","success","_error$response","message","apiGet","apiAuthPost","apiPost","apiPut","apiPatch","apiDelete"],"sources":["C:/laragon/www/PetHaven/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create a custom axios instance for API calls\nexport const api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  withCredentials: true, // Important for cookies, including CSRF\n});\n\n// Helper function to set auth token in headers\nexport const setAuthToken = (token) => {\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Token ${token}`;\n    // Also set it for any requests made with the default axios instance\n    axios.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Initialize token from localStorage if it exists\nconst initializeAuth = () => {\n  const storedUser = localStorage.getItem('user');\n  if (storedUser) {\n    try {\n      const userData = JSON.parse(storedUser);\n      if (userData && userData.token) {\n        setAuthToken(userData.token);\n      }\n    } catch (error) {\n      console.error('Invalid user data in localStorage:', error);\n      localStorage.removeItem('user');\n    }\n  }\n};\n\n// Call this function when the app starts\ninitializeAuth();\n\n// Function to fetch CSRF token before sensitive operations\nexport const fetchCSRFToken = async () => {\n  try {\n    await api.get('/csrf/');\n    console.log('CSRF token fetched successfully');\n    return true;\n  } catch (error) {\n    console.error('Error fetching CSRF token:', error);\n    return false;\n  }\n};\n\n// Export a convenience function for making authenticated API calls\nexport const makeAuthenticatedRequest = async (method, url, data = null, fetchCSRF = false) => {\n  try {\n    // Fetch CSRF token before POST/PUT/PATCH requests if requested\n    if (fetchCSRF && method !== 'get' && method !== 'options') {\n      await fetchCSRFToken();\n    }\n    \n    const config = {\n      method,\n      url,\n      data: method !== 'get' ? data : undefined,\n      params: method === 'get' ? data : undefined,\n    };\n    \n    const response = await api(config);\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error(`API Error (${url}):`, error);\n    return { \n      success: false, \n      error: error.response?.data || { message: 'Network error occurred' }\n    };\n  }\n};\n\n// Export convenience methods for common HTTP verbs\nexport const apiGet = (url, params) => makeAuthenticatedRequest('get', url, params, false);\n\n// For auth operations (login/register), always fetch CSRF token first\nexport const apiAuthPost = (url, data) => makeAuthenticatedRequest('post', url, data, true);\n\n// Regular operations\nexport const apiPost = (url, data) => makeAuthenticatedRequest('post', url, data, false);\nexport const apiPut = (url, data) => makeAuthenticatedRequest('put', url, data, false);\nexport const apiPatch = (url, data) => makeAuthenticatedRequest('patch', url, data, false);\nexport const apiDelete = (url) => makeAuthenticatedRequest('delete', url, null, false);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}