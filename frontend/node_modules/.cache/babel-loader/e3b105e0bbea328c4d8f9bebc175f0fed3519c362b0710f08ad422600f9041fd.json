{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\PetHaven\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Função para obter o valor de um cookie pelo nome\nconst getCookie = name => {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // O cookie CSRF do Django geralmente se chama 'csrftoken'\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Verificar se o usuário já está logado carregando do localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      const userData = JSON.parse(storedUser);\n      setUser(userData);\n\n      // Configurar o cabeçalho de autorização para requisições\n      if (userData.token) {\n        axios.defaults.headers.common['Authorization'] = `Token ${userData.token}`;\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('Tentando login para:', username);\n\n      // Configurar o Axios para não usar cookies ou CSRF para esta requisição específica\n      const axiosInstance = axios.create({\n        baseURL: 'http://localhost:8000',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        withCredentials: false // Desativar envio de cookies\n      });\n\n      // Fazer login usando a instância do Axios configurada\n      const response = await axiosInstance.post('/api/auth/login/', {\n        username,\n        password\n      });\n      console.log('Resposta do login:', response.data);\n\n      // Verificar se a resposta contém um token\n      if (!response.data || !response.data.token) {\n        throw new Error('Resposta inválida do servidor. Token não encontrado.');\n      }\n      const userData = response.data;\n\n      // Garantir que userData.id exista (compatível com user_id do backend)\n      if (!userData.id && userData.user_id) {\n        userData.id = userData.user_id;\n      }\n      console.log('Dados do usuário processados:', userData);\n\n      // Armazenar usuário no localStorage e contexto\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n\n      // Definir cabeçalho de autorização padrão para requisições futuras\n      axios.defaults.headers.common['Authorization'] = `Token ${userData.token}`;\n      return true;\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response$data$no;\n      console.error('Login error:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$no = _err$response$data.non_field_errors) === null || _err$response$data$no === void 0 ? void 0 : _err$response$data$no[0]) || 'Falha no login. Verifique suas credenciais.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Configurar axios para enviar cookies com as requisições\n      axios.defaults.withCredentials = true;\n\n      // Primeiro, garantir que o cookie CSRF está setado (a view get_csrf_token faz isso)\n      await axios.get('http://localhost:8000/api/auth/csrf/', {\n        withCredentials: true\n      });\n\n      // Obter o token CSRF do cookie\n      const csrfToken = getCookie('csrftoken');\n\n      // Enviar requisição de registro\n      const response = await axios.post('http://localhost:8000/api/auth/register/', userData, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-CSRFToken': csrfToken // Adicionar o token CSRF ao cabeçalho\n        }\n      });\n\n      // Se quiser fazer login automático após o registro, descomente o código abaixo\n      // localStorage.setItem('user', JSON.stringify(response.data));\n      // setUser(response.data);\n      // axios.defaults.headers.common['Authorization'] = `Token ${response.data.token}`;\n      return true;\n    } catch (err) {\n      var _err$response2;\n      console.error('Register error:', err);\n      // Extrai mensagens de erro da resposta do Django REST\n      let errorMessage = 'Falha no cadastro. Por favor, tente novamente.';\n      if ((_err$response2 = err.response) !== null && _err$response2 !== void 0 && _err$response2.data) {\n        // Tentativa de formatar os erros de uma maneira mais amigável\n        const errors = err.response.data;\n        const errorMessages = [];\n        Object.keys(errors).forEach(key => {\n          if (Array.isArray(errors[key])) {\n            errorMessages.push(`${key}: ${errors[key].join(', ')}`);\n          } else {\n            errorMessages.push(`${key}: ${errors[key]}`);\n          }\n        });\n        if (errorMessages.length > 0) {\n          errorMessage = errorMessages.join('\\n');\n        }\n      }\n      setError(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    // Remove user from localStorage and context\n    localStorage.removeItem('user');\n    setUser(null);\n\n    // Remove Authorization header\n    delete axios.defaults.headers.common['Authorization'];\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","storedUser","localStorage","getItem","userData","JSON","parse","token","defaults","headers","common","login","username","password","console","log","axiosInstance","create","baseURL","withCredentials","response","post","data","Error","id","user_id","setItem","stringify","err","_err$response","_err$response$data","_err$response$data$no","non_field_errors","register","get","csrfToken","_err$response2","errorMessage","errors","errorMessages","Object","keys","forEach","key","Array","isArray","push","join","logout","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/laragon/www/PetHaven/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\n// Função para obter o valor de um cookie pelo nome\r\nconst getCookie = (name) => {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim();\r\n      // O cookie CSRF do Django geralmente se chama 'csrftoken'\r\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Verificar se o usuário já está logado carregando do localStorage\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      const userData = JSON.parse(storedUser);\r\n      setUser(userData);\r\n      \r\n      // Configurar o cabeçalho de autorização para requisições\r\n      if (userData.token) {\r\n        axios.defaults.headers.common['Authorization'] = `Token ${userData.token}`;\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (username, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log('Tentando login para:', username);\r\n      \r\n      // Configurar o Axios para não usar cookies ou CSRF para esta requisição específica\r\n      const axiosInstance = axios.create({\r\n        baseURL: 'http://localhost:8000',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        withCredentials: false // Desativar envio de cookies\r\n      });\r\n\r\n      // Fazer login usando a instância do Axios configurada\r\n      const response = await axiosInstance.post('/api/auth/login/', { \r\n        username, \r\n        password \r\n      });\r\n      \r\n      console.log('Resposta do login:', response.data);\r\n      \r\n      // Verificar se a resposta contém um token\r\n      if (!response.data || !response.data.token) {\r\n        throw new Error('Resposta inválida do servidor. Token não encontrado.');\r\n      }\r\n      \r\n      const userData = response.data;\r\n      \r\n      // Garantir que userData.id exista (compatível com user_id do backend)\r\n      if (!userData.id && userData.user_id) {\r\n        userData.id = userData.user_id;\r\n      }\r\n      \r\n      console.log('Dados do usuário processados:', userData);\r\n      \r\n      // Armazenar usuário no localStorage e contexto\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      // Definir cabeçalho de autorização padrão para requisições futuras\r\n      axios.defaults.headers.common['Authorization'] = `Token ${userData.token}`;\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError(err.response?.data?.non_field_errors?.[0] || 'Falha no login. Verifique suas credenciais.');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Configurar axios para enviar cookies com as requisições\r\n      axios.defaults.withCredentials = true;\r\n      \r\n      // Primeiro, garantir que o cookie CSRF está setado (a view get_csrf_token faz isso)\r\n      await axios.get('http://localhost:8000/api/auth/csrf/', { withCredentials: true });\r\n      \r\n      // Obter o token CSRF do cookie\r\n      const csrfToken = getCookie('csrftoken');\r\n\r\n      // Enviar requisição de registro\r\n      const response = await axios.post(\r\n        'http://localhost:8000/api/auth/register/', \r\n        userData,\r\n        { \r\n          withCredentials: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            'X-CSRFToken': csrfToken // Adicionar o token CSRF ao cabeçalho\r\n          }\r\n        }\r\n      );\r\n      \r\n      // Se quiser fazer login automático após o registro, descomente o código abaixo\r\n      // localStorage.setItem('user', JSON.stringify(response.data));\r\n      // setUser(response.data);\r\n      // axios.defaults.headers.common['Authorization'] = `Token ${response.data.token}`;\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Register error:', err);\r\n      // Extrai mensagens de erro da resposta do Django REST\r\n      let errorMessage = 'Falha no cadastro. Por favor, tente novamente.';\r\n      if (err.response?.data) {\r\n        // Tentativa de formatar os erros de uma maneira mais amigável\r\n        const errors = err.response.data;\r\n        const errorMessages = [];\r\n        \r\n        Object.keys(errors).forEach(key => {\r\n          if (Array.isArray(errors[key])) {\r\n            errorMessages.push(`${key}: ${errors[key].join(', ')}`);\r\n          } else {\r\n            errorMessages.push(`${key}: ${errors[key]}`);\r\n          }\r\n        });\r\n        \r\n        if (errorMessages.length > 0) {\r\n          errorMessage = errorMessages.join('\\n');\r\n        }\r\n      }\r\n      \r\n      setError(errorMessage);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Remove user from localStorage and context\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    \r\n    // Remove Authorization header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,MAAMO,SAAS,GAAIC,IAAI,IAAK;EAC1B,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,KAAK,EAAE,EAAE;IAC7C,MAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;IAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAMH,MAAM,GAAGC,OAAO,CAACE,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;MAChC;MACA,IAAIL,MAAM,CAACM,SAAS,CAAC,CAAC,EAAET,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,KAAMP,IAAI,GAAG,GAAI,EAAE;QACzDC,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAS,CAACT,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;QACnE;MACF;IACF;EACF;EACA,OAAON,WAAW;AACpB,CAAC;AAED,OAAO,MAAMU,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAM0B,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;MACvCL,OAAO,CAACQ,QAAQ,CAAC;;MAEjB;MACA,IAAIA,QAAQ,CAACG,KAAK,EAAE;QAClB/B,KAAK,CAACgC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,SAASN,QAAQ,CAACG,KAAK,EAAE;MAC5E;IACF;IACAT,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1Cf,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACFc,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,QAAQ,CAAC;;MAE7C;MACA,MAAMI,aAAa,GAAGxC,KAAK,CAACyC,MAAM,CAAC;QACjCC,OAAO,EAAE,uBAAuB;QAChCT,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ,CAAC;QACDU,eAAe,EAAE,KAAK,CAAC;MACzB,CAAC,CAAC;;MAEF;MACA,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,kBAAkB,EAAE;QAC5DT,QAAQ;QACRC;MACF,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,QAAQ,CAACE,IAAI,CAAC;;MAEhD;MACA,IAAI,CAACF,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACf,KAAK,EAAE;QAC1C,MAAM,IAAIgB,KAAK,CAAC,sDAAsD,CAAC;MACzE;MAEA,MAAMnB,QAAQ,GAAGgB,QAAQ,CAACE,IAAI;;MAE9B;MACA,IAAI,CAAClB,QAAQ,CAACoB,EAAE,IAAIpB,QAAQ,CAACqB,OAAO,EAAE;QACpCrB,QAAQ,CAACoB,EAAE,GAAGpB,QAAQ,CAACqB,OAAO;MAChC;MAEAX,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEX,QAAQ,CAAC;;MAEtD;MACAF,YAAY,CAACwB,OAAO,CAAC,MAAM,EAAErB,IAAI,CAACsB,SAAS,CAACvB,QAAQ,CAAC,CAAC;MACtDR,OAAO,CAACQ,QAAQ,CAAC;;MAEjB;MACA5B,KAAK,CAACgC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,SAASN,QAAQ,CAACG,KAAK,EAAE;MAE1E,OAAO,IAAI;IACb,CAAC,CAAC,OAAOqB,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA,EAAAC,qBAAA;MACZjB,OAAO,CAACf,KAAK,CAAC,cAAc,EAAE6B,GAAG,CAAC;MAClC5B,QAAQ,CAAC,EAAA6B,aAAA,GAAAD,GAAG,CAACR,QAAQ,cAAAS,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcP,IAAI,cAAAQ,kBAAA,wBAAAC,qBAAA,GAAlBD,kBAAA,CAAoBE,gBAAgB,cAAAD,qBAAA,uBAApCA,qBAAA,CAAuC,CAAC,CAAC,KAAI,6CAA6C,CAAC;MACpG,OAAO,KAAK;IACd,CAAC,SAAS;MACRjC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMmC,QAAQ,GAAG,MAAO7B,QAAQ,IAAK;IACnCN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF;MACAxB,KAAK,CAACgC,QAAQ,CAACW,eAAe,GAAG,IAAI;;MAErC;MACA,MAAM3C,KAAK,CAAC0D,GAAG,CAAC,sCAAsC,EAAE;QAAEf,eAAe,EAAE;MAAK,CAAC,CAAC;;MAElF;MACA,MAAMgB,SAAS,GAAGvD,SAAS,CAAC,WAAW,CAAC;;MAExC;MACA,MAAMwC,QAAQ,GAAG,MAAM5C,KAAK,CAAC6C,IAAI,CAC/B,0CAA0C,EAC1CjB,QAAQ,EACR;QACEe,eAAe,EAAE,IAAI;QACrBV,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,kBAAkB,EAAE,gBAAgB;UACpC,aAAa,EAAE0B,SAAS,CAAC;QAC3B;MACF,CACF,CAAC;;MAED;MACA;MACA;MACA;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOP,GAAG,EAAE;MAAA,IAAAQ,cAAA;MACZtB,OAAO,CAACf,KAAK,CAAC,iBAAiB,EAAE6B,GAAG,CAAC;MACrC;MACA,IAAIS,YAAY,GAAG,gDAAgD;MACnE,KAAAD,cAAA,GAAIR,GAAG,CAACR,QAAQ,cAAAgB,cAAA,eAAZA,cAAA,CAAcd,IAAI,EAAE;QACtB;QACA,MAAMgB,MAAM,GAAGV,GAAG,CAACR,QAAQ,CAACE,IAAI;QAChC,MAAMiB,aAAa,GAAG,EAAE;QAExBC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,OAAO,CAACC,GAAG,IAAI;UACjC,IAAIC,KAAK,CAACC,OAAO,CAACP,MAAM,CAACK,GAAG,CAAC,CAAC,EAAE;YAC9BJ,aAAa,CAACO,IAAI,CAAC,GAAGH,GAAG,KAAKL,MAAM,CAACK,GAAG,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;UACzD,CAAC,MAAM;YACLR,aAAa,CAACO,IAAI,CAAC,GAAGH,GAAG,KAAKL,MAAM,CAACK,GAAG,CAAC,EAAE,CAAC;UAC9C;QACF,CAAC,CAAC;QAEF,IAAIJ,aAAa,CAACnD,MAAM,GAAG,CAAC,EAAE;UAC5BiD,YAAY,GAAGE,aAAa,CAACQ,IAAI,CAAC,IAAI,CAAC;QACzC;MACF;MAEA/C,QAAQ,CAACqC,YAAY,CAAC;MACtB,OAAO,KAAK;IACd,CAAC,SAAS;MACRvC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMkD,MAAM,GAAGA,CAAA,KAAM;IACnB;IACA9C,YAAY,CAAC+C,UAAU,CAAC,MAAM,CAAC;IAC/BrD,OAAO,CAAC,IAAI,CAAC;;IAEb;IACA,OAAOpB,KAAK,CAACgC,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACvD,CAAC;EAED,MAAMwC,KAAK,GAAG;IACZvD,IAAI;IACJE,OAAO;IACPE,KAAK;IACLY,KAAK;IACLsB,QAAQ;IACRe,MAAM;IACNG,eAAe,EAAE,CAAC,CAACxD;EACrB,CAAC;EAED,oBAAOjB,OAAA,CAACC,WAAW,CAACyE,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAzD,QAAA,EAAEA;EAAQ;IAAA4D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAC9D,EAAA,CA5JWF,YAAY;AAAAiE,EAAA,GAAZjE,YAAY;AAAA,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}